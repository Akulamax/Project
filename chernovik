#include <vector>
#include <cstdlib>
#include <iostream>
#include <iomanip>
#include <string>
#include <ctime>
#include <cmath>
using namespace std;

// base and base_digits must be consistent
const int base = 1000000000;
const int base_digits = 9;

struct bigint {
    vector<int> a;
    int sign;

    bigint() :
        sign(1) {
    }

    bigint(long long v) {
        *this = v;
    }

    bigint(const string &s) {
        read(s);
    }

    void operator=(const bigint &v) {
        sign = v.sign;
        a = v.a;
    }

    void operator=(long long v) {
        sign = 1;
        if (v < 0)
            sign = -1, v = -v;
        for (; v > 0; v = v / base)
            a.push_back(v % base);
    }

    bigint operator+(const bigint &v) const {
        if (sign == v.sign) {
            bigint res = v;

            for (int i = 0, carry = 0; i < (int) max(a.size(), v.a.size()) || carry; ++i) {
                if (i == (int) res.a.size())
                    res.a.push_back(0);
                res.a[i] += carry + (i < (int) a.size() ? a[i] : 0);
                carry = res.a[i] >= base;
                if (carry)
                    res.a[i] -= base;
            }
            return res;
        }
        return *this - (-v);
    }

    bigint operator-(const bigint &v) const {
        if (sign == v.sign) {
            if (abs() >= v.abs()) {
                bigint res = *this;
                for (int i = 0, carry = 0; i < (int) v.a.size() || carry; ++i) {
                    res.a[i] -= carry + (i < (int) v.a.size() ? v.a[i] : 0);
                    carry = res.a[i] < 0;
                    if (carry)
                        res.a[i] += base;
                }
                res.trim();
                return res;
            }
            return -(v - *this);
        }
        return *this + (-v);
    }

    void operator*=(int v) {
        if (v < 0)
            sign = -sign, v = -v;
        for (int i = 0, carry = 0; i < (int) a.size() || carry; ++i) {
            if (i == (int) a.size())
                a.push_back(0);
            long long cur = a[i] * (long long) v + carry;
            carry = (int) (cur / base);
            a[i] = (int) (cur % base);
            //asm("divl %%ecx" : "=a"(carry), "=d"(a[i]) : "A"(cur), "c"(base));
        }
        trim();
    }

    bigint operator*(int v) const {
        bigint res = *this;
        res *= v;
        return res;
    }

    friend pair<bigint, bigint> divmod(const bigint &a1, const bigint &b1) {
        int norm = base / (b1.a.back() + 1);
        bigint a = a1.abs() * norm;
        bigint b = b1.abs() * norm;
        bigint q, r;
        q.a.resize(a.a.size());

        for (int i = a.a.size() - 1; i >= 0; i--) {
            r *= base;
            r += a.a[i];
            int s1 = r.a.size() <= b.a.size() ? 0 : r.a[b.a.size()];
            int s2 = r.a.size() <= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];
            int d = ((long long) base * s1 + s2) / b.a.back();
            r -= b * d;
            while (r < 0)
                r += b, --d;
            q.a[i] = d;
        }

        q.sign = a1.sign * b1.sign;
        r.sign = a1.sign;
        q.trim();
        r.trim();
        return make_pair(q, r / norm);
    }

    bigint operator/(const bigint &v) const {
        return divmod(*this, v).first;
    }

    bigint operator%(const bigint &v) const {
        return divmod(*this, v).second;
    }

    void operator/=(int v) {
        if (v < 0)
            sign = -sign, v = -v;
        for (int i = (int) a.size() - 1, rem = 0; i >= 0; --i) {
            long long cur = a[i] + rem * (long long) base;
            a[i] = (int) (cur / v);
            rem = (int) (cur % v);
        }
        trim();
    }

    bigint operator/(int v) const {
        bigint res = *this;
        res /= v;
        return res;
    }

    int operator%(int v) const {
        if (v < 0)
            v = -v;
        int m = 0;
        for (int i = a.size() - 1; i >= 0; --i)
            m = (a[i] + m * (long long) base) % v;
        return m * sign;
    }

    void operator+=(const bigint &v) {
        *this = *this + v;
    }

    void operator-=(const bigint &v) {
        *this = *this - v;
    }

    void operator*=(const bigint &v) {
        *this = *this * v;
    }

    void operator/=(const bigint &v) {
        *this = *this / v;
    }

    bool operator<(const bigint &v) const {
        if (sign != v.sign)
            return sign < v.sign;
        if (a.size() != v.a.size())
            return a.size() * sign < v.a.size() * v.sign;
        for (int i = a.size() - 1; i >= 0; i--)
            if (a[i] != v.a[i])
                return a[i] * sign < v.a[i] * sign;
        return false;
    }

    bool operator>(const bigint &v) const {
        return v < *this;
    }

    bool operator<=(const bigint &v) const {
        return !(v < *this);
    }

    bool operator>=(const bigint &v) const {
        return !(*this < v);
    }

    bool operator==(const bigint &v) const {
        return !(*this < v) && !(v < *this);
    }

    bool operator!=(const bigint &v) const {
        return *this < v || v < *this;
    }

    void trim() {
        while (!a.empty() && !a.back())
            a.pop_back();
        if (a.empty())
            sign = 1;
    }

    bool isZero() const {
        return a.empty() || (a.size() == 1 && !a[0]);
    }

    bigint operator-() const {
        bigint res = *this;
        res.sign = -sign;
        return res;
    }

    bigint abs() const {
        bigint res = *this;
        res.sign *= res.sign;
        return res;
    }

    long long longValue() const {
        long long res = 0;
        for (int i = a.size() - 1; i >= 0; i--)
            res = res * base + a[i];
        return res * sign;
    }

    friend bigint gcd(const bigint &a, const bigint &b) {
        return b.isZero() ? a : gcd(b, a % b);
    }

    friend bigint lcm(const bigint &a, const bigint &b) {
        return a / gcd(a, b) * b;
    }

    void read(const string &s) {
        sign = 1;
        a.clear();
        int pos = 0;
        while (pos < (int) s.size() && (s[pos] == '-' || s[pos] == '+')) {
            if (s[pos] == '-')
                sign = -sign;
            ++pos;
        }
        for (int i = s.size() - 1; i >= pos; i -= base_digits) {
            int x = 0;
            for (int j = max(pos, i - base_digits + 1); j <= i; j++)
                x = x * 10 + s[j] - '0';
            a.push_back(x);
        }
        trim();
    }

    friend istream& operator>>(istream &stream, bigint &v) {
        string s;
        stream >> s;
        v.read(s);
        return stream;
    }

    friend ostream& operator<<(ostream &stream, const bigint &v) {
        if (v.sign == -1)
            stream << '-';
        stream << (v.a.empty() ? 0 : v.a.back());
        for (int i = (int) v.a.size() - 2; i >= 0; --i)
            stream << setw(base_digits) << setfill('0') << v.a[i];
        return stream;
    }

    static vector<int> convert_base(const vector<int> &a, int old_digits, int new_digits) {
        vector<long long> p(max(old_digits, new_digits) + 1);
        p[0] = 1;
        for (int i = 1; i < (int) p.size(); i++)
            p[i] = p[i - 1] * 10;
        vector<int> res;
        long long cur = 0;
        int cur_digits = 0;
        for (int i = 0; i < (int) a.size(); i++) {
            cur += a[i] * p[cur_digits];
            cur_digits += old_digits;
            while (cur_digits >= new_digits) {
                res.push_back(int(cur % p[new_digits]));
                cur /= p[new_digits];
                cur_digits -= new_digits;
            }
        }
        res.push_back((int) cur);
        while (!res.empty() && !res.back())
            res.pop_back();
        return res;
    }

    typedef vector<long long> vll;

    static vll karatsubaMultiply(const vll &a, const vll &b) {
        int n = a.size();
        vll res(n + n);
        if (n <= 32) {
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    res[i + j] += a[i] * b[j];
            return res;
        }

        int k = n >> 1;
        vll a1(a.begin(), a.begin() + k);
        vll a2(a.begin() + k, a.end());
        vll b1(b.begin(), b.begin() + k);
        vll b2(b.begin() + k, b.end());

        vll a1b1 = karatsubaMultiply(a1, b1);
        vll a2b2 = karatsubaMultiply(a2, b2);

        for (int i = 0; i < k; i++)
            a2[i] += a1[i];
        for (int i = 0; i < k; i++)
            b2[i] += b1[i];

        vll r = karatsubaMultiply(a2, b2);
        for (int i = 0; i < (int) a1b1.size(); i++)
            r[i] -= a1b1[i];
        for (int i = 0; i < (int) a2b2.size(); i++)
            r[i] -= a2b2[i];

        for (int i = 0; i < (int) r.size(); i++)
            res[i + k] += r[i];
        for (int i = 0; i < (int) a1b1.size(); i++)
            res[i] += a1b1[i];
        for (int i = 0; i < (int) a2b2.size(); i++)
            res[i + n] += a2b2[i];
        return res;
    }

    bigint operator*(const bigint &v) const {
        vector<int> a6 = convert_base(this->a, base_digits, 6);
        vector<int> b6 = convert_base(v.a, base_digits, 6);
        vll a(a6.begin(), a6.end());
        vll b(b6.begin(), b6.end());
        while (a.size() < b.size())
            a.push_back(0);
        while (b.size() < a.size())
            b.push_back(0);
        while (a.size() & (a.size() - 1))
            a.push_back(0), b.push_back(0);
        vll c = karatsubaMultiply(a, b);
        bigint res;
        res.sign = sign * v.sign;
        for (int i = 0, carry = 0; i < (int) c.size(); i++) {
            long long cur = c[i] + carry;
            res.a.push_back((int) (cur % 1000000));
            carry = (int) (cur / 1000000);
        }
        res.a = convert_base(res.a, 6, base_digits);
        res.trim();
        return res;
    }
};

const int trivial_limit = 1000;
int p[999];

//! Наибольший общий делитель
bigint GCD (bigint a, bigint b) {
    if(a!=0) return GCD (b%a,a);
        else return b;

}
//! Вычисляет a^b (mod m)
 bigint  Powmod ( bigint  a,  bigint  b,   bigint  m)
{
	bigint res = 1;
	while (b!=0)
		if (b %2!=0 )
			res = (res  * a) % m,  b=b-1;
		else
			a = (a * a) % m,  b/=2;
	return res;
}
//! Тест Миллера-Рабина
bool miller_rabin ( bigint n) {
    if (n == 2) // сначала проверяем тривиальные случаи
        return true;
    if (n < 2 || n%2==0)
        return false;
	 bigint b = 2;
	 bigint g=gcd(n,b);                            // проверяем, что n и b взаимно просты (иначе это приведет к ошибке)
	for (  bigint g=gcd(n,b); g!= 1; b=b+1){ // если они не взаимно просты, то либо n не просто, либо нужно увеличить b
		if (n > g)
			return false;}
	 bigint p=0, q=n-1; //Переводим число n-1 в форму q*2^p
	while ((q %2 ) == 0)
		p=p+1,  q /=2 ;
	 bigint res = Powmod (b, q, n);
	if (res == 1 || res == n-1)
		return true;
	for ( bigint i=1; i<p; i=i+1) {
		res = (res  * res) % n;
		if (res == n-1)  return true;
	}
	return false;
}
//! Вычисления символа Якоби
bigint jacobi ( bigint a,  bigint b)
{
	if (a == 0)  return 0;
	if (a == 1)  return 1;
	if (a < 0){
		if ((b % 4) == 1)
			return jacobi (-a, b);
		else
			return - jacobi (-a, b);}
	 bigint a1=a,  e=0;
	while ((a1 %2) == 0)
		a1 /=2,  e=e+1;
	 bigint s;
	if ((e %2) == 0 || (b % 8) == 1 || (b %8) == 7)
		s = 1;
	else
		s = -1;
	if ((b % 4) == 3 && (a1 %4) == 3)
		s = -s;
	if (a1 == 1)
		return s;
	return s * jacobi (b % a1, a1);
}
//! Сильный тест Лукаса-Селфриджа
bool lucas_selfridge (bigint n) {
//	if ((bigint)sqrt(n+0.0) * (bigint)sqrt(n+0.0) == n)  return false;
	bigint D=5;
	bigint a=1;
while (true) { //бесконечный цикл
        bigint abs(D);
		 bigint g = gcd (n, D);//взаимно простые или нет
		if (a<g && g<n)  return false;
		if (jacobi (D, n) == -1)  break;//подбираем D-число для параметра в тест Лукаса-Селфриджа
		if(D<0) D=-D+2;
            else D=-D-2;
	}
	bigint p=1,  q=(p*p-D)/4;// тест Лукаса
	bigint d=n+1,  s=0;
	while ((d %2) == 0)
		s=s+1,  d/=2;
	bigint u=1, v=p, u2m=1, v2m=p, qm=q, qm2=q*2, qkd=q;
	for (bigint f=2; f<=d; f*=2) {
		u2m = (u2m * v2m) % n;
		v2m = (v2m * v2m) % n;
		while (v2m < qm2)   v2m += n;
		v2m -= qm2;
		qm = (qm * qm) % n;
		qm2 = qm * 2;
          bigint c=0;
		  while( d>0 && f>0){
bigint t=(d%2)*(f%2);
       d=d/2;
       f=f/2;
       c=c*2;
       c=c+t;}
		if (c==0) {//!&
			bigint t1 = (u2m * v) % n,  t2 = (v2m * u) % n,
				t3 = (v2m * v) % n,  t4 = (((u2m * u) % n) *D) % n;
			u = t1 + t2;
			if (u %2 )  u += n;
			u = (u /2) % n;
			v = t3 + t4;
			if (v %2)  v += n;
			v = (v /2 ) % n;
			qkd = (qkd * qm) % n;
		}
	}
	if (u==0 || v==0)  return true;
	bigint qkd2 = qkd*2;
	for (bigint r=1; r<s; r=r+1) {
		v = (v * v) % n - qkd2;
		if (v < 0)  v += n;
		if (v < 0)  v += n;
		if (v >= n)  v -= n;
		if (v >= n)  v -= n;
		if (v == 0)  return true;
		if (r < s-1) {
			qkd = (qkd * qkd) % n;
			qkd2 = qkd * 2;
		}
	}
	return false;
}
//! эту функцию нужно вызывать для проверки на простоту
bool bpsw (  bigint n) {
	/*for ( bigint  i=0; i<trivial_limit && p[i]<n; i=i+1) //проверка на простые делители
		if (n % p[i] == 0)
			return false;
if (p[trivial_limit-1]*p[trivial_limit-1] >= n)
		return true;*/
	if (miller_rabin (n)==0)//тест Миллера-Рабина
		return false;
	return lucas_selfridge (n);
}
//! вызвать до первого вызова prime() *(записывает делители до trivial_limit)
void prime_init() {
/*	for (bigint i=2, j=0; j<trivial_limit; i=i+1) {
		bool pr = true;
		for (bigint k=2; k*k<=i; k=k+1)
			if (i % k == 0)
				pr = false;
		if (pr){
            j=j+1;
			p[j] = i;}
	}*/
}
int main()
{
bigint n;
cout<<"Enter integer to test primality: ";
cin>>n;
if (n<=1){ cout<<n<< " is not prime and not composite";
exit(0);}
    //prime_init();
    if(bpsw (n))
        cout<<n<<" is prime";
        else cout<<n<<" is composite";
cout<<miller_rabin(n);
cout<<lucas_selfridge(n);
/*bigint d=7,f=4;
bigint c=0;
	  while( d!=0 && f!=0){
bigint t=(d%2)*(f%2);
       d=d/2;
       f=f/2;
       c=c*2;
       c=c+t;}
       cout<<c;
 int a=7,b=4,k;
 k=a&b;
 cout<<k;*/
    return 0;
}
