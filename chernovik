#include <iostream>
#include <cmath>
#include <cstdlib>
using namespace std;
const int trivial_limit = 1000;
int p[999];

//! Наибольший общий делитель
int GCD (long long int a, long long int b) {
    if(a!=0) return GCD (b%a,a);
        else return b;

}
//! Вычисляет a^b (mod m)
 long long  Powmod ( long long  a,  long long  b,   long long  m)
{
	long long res = 1;
	while (b!=0)
		if (b %2!=0 )
			res = (res  * a) % m,  --b;
		else
			a = (a * a) % m,  b/=2;
	return res;
}
//! Тест Миллера-Рабина
bool miller_rabin ( long long n) {
    if (n == 2) // сначала проверяем тривиальные случаи
        return true;
    if (n < 2 || n%2==0)
        return false;
	 long long b = 2;                              // проверяем, что n и b взаимно просты (иначе это приведет к ошибке)
	for ( long long g; (g = GCD (n, b)) != 1; ++b) // если они не взаимно просты, то либо n не просто, либо нужно увеличить b
		if (n > g)
			return false;
	 long long p=0, q=n-1; //Переводим число n-1 в форму q*2^p
	while ((q %2 ) == 0)
		++p,  q /=2 ;
	 long long res = Powmod (b, q, n);
	if (res == 1 || res == n-1)
		return true;
	for ( long long i=1; i<p; ++i) {
		res = (res  * res) % n;
		if (res == n-1)  return true;
	}
	return false;
}
//! Вычисления символа Якоби
long long jacobi ( long long a,  long long b)
{
	if (a == 0)  return 0;
	if (a == 1)  return 1;
	if (a < 0){
		if ((b % 4) == 1)
			return jacobi (-a, b);
		else
			return - jacobi (-a, b);}
	 long long a1=a,  e=0;
	while ((a1 %2) == 0)
		a1 /=2,  ++e;
	 long long s;
	if ((e %2) == 0 || (b % 8) == 1 || (b %8) == 7)
		s = 1;
	else
		s = -1;
	if ((b % 4) == 3 && (a1 %4) == 3)
		s = -s;
	if (a1 == 1)
		return s;
	return s * jacobi (b % a1, a1);
}
//! Сильный тест Лукаса-Селфриджа
bool lucas_selfridge (long long n) {
	if ((long long)sqrt(n+0.0) * (long long)sqrt(n+0.0) == n)  return false;
	long long D=5;
	while (true) { //бесконечный цикл
		 long long int g = GCD (n, abs(D));//взаимно простые или нет
		if (1<g && g<n)  return false;
		if (jacobi (D, n) == -1)  break;//подбираем D-число для параметра в тест Лукаса-Селфриджа
		if(D<0) D=-D+2;
            else D=-D-2;
	}
	long long p=1,  q=(p*p-D)/4;// тест Лукаса
	long long d=n+1,  s=0;
	while ((d %2) == 0)
		++s,  d/=2;
	long long u=1, v=p, u2m=1, v2m=p, qm=q, qm2=q*2, qkd=q;
	for (long long f=2; f<=d; f*=2) {
		u2m = (u2m * v2m) % n;
		v2m = (v2m * v2m) % n;
		while (v2m < qm2)   v2m += n;
		v2m -= qm2;
		qm = (qm * qm) % n;
		qm2 = qm * 2;
		if (d & f) {
			long long t1 = (u2m * v) % n,  t2 = (v2m * u) % n,
				t3 = (v2m * v) % n,  t4 = (((u2m * u) % n) *D) % n;
			u = t1 + t2;
			if (u %2 )  u += n;
			u = (u /2) % n;
			v = t3 + t4;
			if (v %2)  v += n;
			v = (v /2 ) % n;
			qkd = (qkd * qm) % n;
		}
	}
	if (u==0 || v==0)  return true;
	long long qkd2 = qkd*2;
	for (long long r=1; r<s; ++r) {
		v = (v * v) % n - qkd2;
		if (v < 0)  v += n;
		if (v < 0)  v += n;
		if (v >= n)  v -= n;
		if (v >= n)  v -= n;
		if (v == 0)  return true;
		if (r < s-1) {
			qkd = (qkd * qkd) % n;
			qkd2 = qkd * 2;
		}
	}
	return false;
}
//! эту функцию нужно вызывать для проверки на простоту
bool bpsw (  long long n) {
	for ( long long  i=0; i<trivial_limit && p[i]<n; ++i) //проверка на простые делители
		if (n % p[i] == 0)
			return false;
if (p[trivial_limit-1]*p[trivial_limit-1] >= n)
		return true;
	if (miller_rabin (n)==0)//тест Миллера-Рабина
		return false;
	return lucas_selfridge (n);
}
//! вызвать до первого вызова prime() *(записывает делители до trivial_limit)
void prime_init() {
	for (long long i=2, j=0; j<trivial_limit; ++i) {
		bool pr = true;
		for (long long k=2; k*k<=i; ++k)
			if (i % k == 0)
				pr = false;
		if (pr)
			p[j++] = i;
	}
}
int main()
{
long long n;
cout<<"Enter integer to test primality: ";
cin>>n;
if (n<=1){ cout<<n<< " is not prime and not composite";
exit(0);}
    prime_init();
    if(bpsw (n))
        cout<<n<<" is prime";
        else cout<<n<<" is composite";
    return 0;
}
